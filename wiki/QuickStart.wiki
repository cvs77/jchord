#labels Phase-Deploy,Featured
Download the latest version of Chord (say `chord-x.y.tar.gz`) from [http://code.google.com/p/jchord/downloads/list here] and uncompress it in a suitable directory by running the following command:
{{{
    tar xvzf chord-x.y.tar.gz
}}}
This will create a directory structure with root directory `chord-x.y`.

Ensure that you have installed [http://www.ibm.com/developerworks/java/jdk/ JDK 5 or higher] and [http://ant.apache.org/ Apache Ant].  Software used by Chord is known to have problems with Sun JVMs and 64-bit JVMs; so a 32-bit IBM JVM is recommended even on a 64-bit machine.

Compile Chord by running the following command in Chord's root directory `chord-x.y/`:
{{{
    ant
}}}
Suppose the program to be analyzed has the following directory structure:
{{{
    foo/
        src/
            foo/
                Main.java
                ...
        classes/
            foo/
                Main.class
                ...
        lib/
            src/
                taz/
                    ...
            jars/
                taz.jar
        chord/
            chord.properties
}}}
The above structure is typical: the program's Java source files are located under `foo/src/`, its class files are located under `foo/classes/`, the source and jar files of the libraries used by the program are under `foo/lib/src/` and `foo/lib/jars/`, respectively, and finally `foo/chord/` is the directory to which Chord will output its intermediate and final results.

Execute Chord on the above program by running the following command in Chord's root directory `chord-x.y/`:
{{{
    ant -Dchord.work.dir=.../foo/chord/ run
}}}
where "..." denotes either the absolute path, or the path relative to Chord's root directory, of the parent of directory `foo/`. Chord will read the system properties specified in the file named `chord.properties` that it presumes exists in the directory specified by system property `chord.work.dir` which in the above case is directory `foo/chord/`. A sample such file for the above program is as follows:
{{{
    chord.main.class=foo.Main
    chord.class.path=../classes/:../lib/jars/taz.jar
    chord.src.path=../src/:../lib/src/
    chord.out=log.txt
    chord.err=log.txt
    chord.serial.file=program.ser
    chord.analysis.class=chord.analyses.datarace.DataraceAnalysis
}}}
Every non-absolute file location used in the value of any system property defined in the above file is taken to be relative to the directory specified by system property `chord.work.dir`.

The user guide presents an exhaustive listing of system properties recognized by Chord. Briefly:

  * `chord.main.class` specifies the main class of the program to be analyzed.

  * `chord.class.path` specifies the application classpath of the program to be analyzed (as opposed to the JDK library classpath which consists of jar files such as `rt.jar` which are implicitly appended to the program's application classpath to yield the complete program classpath).

  * `chord.out` and `chord.err` specify the files (typically one and the same) to which the standard output and standard error streams, respectively, must be redirected while running Chord.

  * `chord.serial.file` specifies the file from (resp. to) which the serialized form of the intermediate representation of the program to be analyzed must be loaded (resp. stored). This option is provided because loading the serialized form is much faster than constructing the intermediate representation of the program each time.

  * `chord.analysis.class` specifies the fully-qualified name of the class defining the analysis to be run.
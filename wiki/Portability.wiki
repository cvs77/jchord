Chord has been tested on the following architectures:

|| *OS* || *JVM* ||
|| 32-bit Linux || Sun 32-bit Java 1.6 ||
||      "       || Sun 32-bit Java 1.6 ||
|| 64-bit Linux || Sun 32-bit Java 1.6 ||
||      "       || IBM 32-bit Java 1.6 ||
||      "       || Sun 64-bit Java 1.6 ||
||      "       || IBM 64-bit Java 1.6 ||
|| 32-bit Windows with Cygwin || Sun 32-bit Java 1.6 ||
|| 32-bit Mac OS X (Darwin) || SoyLatte Java 1.6 ||

The Sun JVMs are available from [http://java.sun.com/javase/downloads/index.jsp here] and the IBM JVMs are available from [http://www.ibm.com/developerworks/java/jdk/ here].

Let me know if you have:
  * problems running Chord on any of the above architectures, or
  * been able to run Chord on architectures besides those listed above.

Chord determines whether the JVM is 32-bit or 64-bit by checking the value of system property `sun.arch.data.model`.  If you use a JVM that does not set this property, you will need to set it to "32" or "64" on the command line while running `build.xml` located in the root directory of the distribution.

The best way to figure out if Chord is compatible with your machine is to install and run it on one of the example programs under `chord/examples/` and see if it exits by logging an exception with the following message in the file you have specified via system property `chord.err`: 
{{{
   FATAL: Could not load BDD package buddy: /.../chord/libbuddy.so
}}}
In versions prior to 0.4, this message was more cryptic, and contained the message "User called break".

Chord itself is written entirely in Java, and hence is portable to all architectures, but it uses a native BDD library (buddy) and the current Chord distribution provides pre-compiled versions of this library for only the above architectures (see `chord/lib/bddbddb/lib*/*`).  The above error message arises if Chord is unable to load the library.  Let me know if you wish to build the library yourself for your architecture and I will provide you with its source code.
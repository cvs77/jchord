#summary Roadmap for Chord 2.0 and Chord 3.0
#labels Featured

==Chord 3.0==

None yet.

==Chord 2.0==

TODO:
  * Features
    * Integrate CnC/Habanero-Java runtime from Rice Univ's Habanero project, for expressing data/control dependencies between program analyses (phase out current ad-hoc semantics provided by @Chord annotations which allow expressing only data dependencies).  Besides cleaner semantics, it will provide additional benefits like parallel execution of independent analyses and deterministic execution guarantees (IN PROGRESS). 

DONE:
  * Documentation
  * Regression test suite
  * Features
    * Handle as much reflection as possible, statically or dynamically
      * ACTION: provided various options via chord.reflect.kind, all implemented in main/src/chord/program/reflect/
    * enable instrumenting only initial k iterations of loops, as a way to reduce run-time overhead of dynamic analyses
      * ACTION: enter_loop, perform_iteration, and leave_loop API now provided by chord.project.analyses.DynamicAnalysis 
    * Separate the RHS algorithm implementation from full-thresc-java analysis
      * ACTION: separated and available under package chord.project.analyses.rhs
    * make Chord scope construction deterministic
      * ACTION: added getSortedMembers() method to joeq.Class.jq_Class, which makes the order of all members in a class (and thereby all methods in domain M) deterministic; the original order was different in the initial Chord run and the subsequent run that used classes.txt and methods.txt, because the two runs load classes in different orders.  Also, fixed method buildTypes() in chord.program.Program to consider the set of all types (domain T) as the set of prepared classes, instead of the set of all types recorded by joeq.Class.PrimordialClassLoader.
  * Test suite
    * allow domains and relations to be loaded from disk instead of re-running analyses every time to construct them afresh (requires joeq.`*` to be serializable)
      * ACTION: allowed only relations to be loaded from disk; serializing joeq.`*` is too complicated
  * Bug fixes
    * bddbddb constructs a wrong stratification for certain Datalog programs with mutually recursive rules
      * ACTION: filed a bug and reverted to an older version of bddbddb that does not exhibit this bug
  * Documentation
    * Javadoc
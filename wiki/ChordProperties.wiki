#summary System Properties recognized by Chord 2.0
#labels Featured

The following system properties are recognized by Chord 2.0.  The separator for list-valued properties can be either a blank space, a comma, a colon, or a semi-colon.

<table border=1>
<tr><td>*Property name*<td>*Type*<td>*Description*<td>*Default value (if any)*
<tr><td colspan="4">*_Chord boot properties_*
<tr><td>chord.work.dir<td>*location*<td>Working directory during Chord's execution.<td>current working directory
<tr><td>chord.props.file<td>*location*<td>Chord properties file loaded by `build.xml`.  Any of the below properties, as well as other user-defined properties to be passed to Chord (e.g. for user-defined analyses), may be set in this file.  Each relative (instead of absolute) path element in the value of any property named `chord.<...>.path` set in this file is converted to an absolute path element w.r.t. `${chord.work.dir}`.<td>`${chord.work.dir}/chord.properties`
<tr><td>chord.max.heap<td>*string*<td>Maximum memory size of JVM running Chord.<td>`1024m`
<tr><td>chord.max.stack<td>*string*<td>Maximum thread stack size of JVM running Chord.<td>`32m`
<tr><td>chord.jvmargs<td>*string*<td>Arguments passed to JVM running Chord.<td>`"-showversion -ea -Xmx${chord.max.heap} -Xss${chord.max.stack}"`
<tr><td>chord.bddbddb.max.heap<td>*string*<td>Maximum memory size of JVM running bddbddb.<td>`1024m`
<tr><td colspan="4">*_Chord task properties_*
<tr><td>chord.build.scope<td>*bool*<td>Compute program scope (i.e. reachable classes and methods) using algorithm specified by `${chord.scope.kind}` and `${chord.reuse.scope}`.  Program scope is computed regardless of the value of this property if another task (e.g. a program analysis to be run) needs it.<td>`false`
<tr><td>chord.run.analyses<td>*string list*<td>List of names of program analyses to be run in order.<td>`""`
<tr><td>chord.print.rels<td>*string list*<td>List of names of program relations whose contents must be printed to files `${chord.out.dir}/<...>.txt` where `<...>` denotes the relation name.<td>`""`
<tr><td>chord.publish.targets<td>*bool*<td>Publish all targets defined by program analyses in paths specified by `${chord.java.analysis.path}` and `${chord.dlog.analysis.path}`.<td>`false`
<tr><td colspan="4">*_Basic program properties_*
<tr><td>chord.main.class<td>*class*<td>Fully-qualified name of main class of program to be analyzed (e.g. `com.example.Main`).<td>
<tr><td>chord.class.path<td>*path*<td>Classpath of program to be analyzed. `${sun.boot.class.path}` is implicitly appended to it.<td> `${sun.boot.class.path}`
<tr><td>chord.src.path<td>*path*<td>Java source path of program to be analyzed.<td>`""`
<tr><td>chord.run.ids<td>*string list*<td>List of IDs to identify runs of given program.<td>`0`
<tr><td>chord.args.XXX<td>*string*<td>Command line arguments to be passed to run having ID XXX of given program.<td>`""`
<tr><td>chord.runtime.jvmargs<td>*string*<td>Arguments to JVM when running given program.  It is used when the program is executed to compute its scope (i.e. when `${chord.scope.kind}` is set to `dynamic`) as well as when the instrumented program is executed for dynamic analyses.<td>`"-ea -Xmx1024m"`
<tr><td colspan="4">*_Program scope properties_*
<tr><td>chord.scope.kind<td>[`rta`|`dynamic`]<td>Algorithm to compute program scope.  Current choices include `rta` (Rapid Type Analysis) and `dynamic` (dynamic analysis).<td>`rta`
<tr><td>chord.reuse.scope<td>*bool*<td>Use program scope specified by `${chord.classes.file}` and `${chord.methods.file}`. `${chord.scope.kind}` is ignored if this property is set to `true`.<td>`false`
<tr><td>chord.scope.exclude<td>*string list*<td>List of prefixes of names of classes and packages to be excluded while computing program scope (i.e. reachable classes and methods).<td>`"java.,sun.,com.sun.,com.ibm.,org.apache.harmony.,joeq.,jwutil."`
<tr><td>chord.check.exclude<td>*string list*<td>List of prefixes of names of classes and packages to be excluded by program analyses.<td>`"java.,sun.,com.sun.,com.ibm.,org.apache.harmony.,joeq.,jwutil."`
<tr><td>chord.instr.exclude<td>*string list*<td>List of prefixes of names of classes and packages to be excluded from being instrumented.  Classes in package `java.lang.ref` are not instrumented regardless of the value of this property.<td>`"java.,sun.,com.sun.,com.ibm.,org.apache.harmony.,joeq.,jwutil."`
<tr><td colspan="4">*_Program analysis properties_*
<tr><td>chord.java.analysis.path<td>*path*<td>Classpath containing program analyses in Java (i.e. `@Chord`-annotated classes).<td>`${chord.home.dir}/classes/main`
<tr><td>chord.dlog.analysis.path<td>*path*<td>Path of directories containing program analyses in Datalog (i.e. `*.datalog` and `*.dlog` files).<td> `${chord.home.dir}/src/main/dlog`
<tr><td>chord.reuse.rels<td>*bool*<td>Construct program relations from BDDs stored on disk (from a previous run of Chord) whenever possible instead of re-computing them.<td>`false`
<tr><td>chord.publish.results<td>*bool*<td>Publish the results of program analyses in HTML.<td>`true`
<tr><td colspan="4">*_Program transformation properties_*
<tr><td>chord.ssa<td>*bool*<td>Do SSA transformation for all methods deemed reachable by the algorithm used to compute program scope.<td>`true`
<tr><td colspan="4">*_Chord debug properties_*
<tr><td>chord.bddbddb.noisy<td>*bool*<td>Make bddbddb output debug info when solving Datalog programs.<td>`false`
<tr><td>chord.save.maps<td>*bool*<td>Write to file `${chord.bddbddb.work.dir}/<...>.map` when saving program domain named `<...>` (useful for debugging Datalog programs using `debug` target of `build.xml`).<td>`true`
<tr><td colspan="4">*_Chord instrumentation properties_*
<tr><td>chord.trace.pipe<td>*bool*<td>Implement the trace file as a POSIX pipe instead of a regular file.<td>`true`
<tr><td>chord.trace.block.size<td>*int*<td>Number of bytes to read/write in a single operation from/to the trace file.<td>`4096`
<tr><td>chord.runtime.class<td>*class*<td>Subclass of `chord.project.Runtime` used by dynamic program analyses to handle events generated during an instrumented program's execution.<td>`chord.project.BufferedRuntime`
<tr><td colspan="4">*_Chord output properties_*
<tr><td>chord.out.dir<td>*location*<td>Directory to which Chord dumps all files.<td>`${chord.work.dir}/chord_output`
<tr><td>chord.out.file<td>*location*<td>File to redirect standard output stream during Chord's execution.<td>`${chord.out.dir}/log.txt`
<tr><td>chord.err.file<td>*location*<td>File to redirect standard error stream during Chord's execution.<td>`${chord.out.dir}/log.txt`
<tr><td>chord.classes.file<td>*location*<td>File from/to which list of classes deemed reachable is read/written.<td>`${chord.out.dir}/classes.txt`
<tr><td>chord.methods.file<td>*location*<td>File from/to which list of methods deemed reachable is read/written.<td>`${chord.out.dir}/methods.txt`
<tr><td>chord.bddbddb.work.dir<td>*location*<td>Directory used by bddbddb as its input/output directory.<td>`${chord.out.dir}/bddbddb`
<tr><td>chord.boot.classes.dir<td>*location*<td>Directory containing instrumented JDK classes used by given program.<td>`${chord.out.dir}/boot_classes`
<tr><td>chord.user.classes.dir<td>*location*<td>Directory containing instrumented non-JDK classes of given program.<td>`${chord.out.dir}/user_classes` 
<tr><td>chord.instr.scheme.file<td>*location*<td>File specifying kind and format of events in trace file.<td>`${chord.out.dir}/scheme.ser`
<tr><td>chord.crude.trace.file<td>*location*<td>Crude trace file.<td>`${chord.out.dir}/crude_trace.txt`
<tr><td>chord.final.trace.file<td>*location*<td>Final trace file.<td>`${chord.out.dir}/final_trace.txt`
<tr><td colspan="4">*_Chord resource properties_*
<tr><td>chord.home.dir<td>*location*<td>Root directory of Chord's installation<td>
<tr><td>chord.lib.dir<td>*location*<td>Directory containing libraries needed by Chord.<td>`${chord.home.dir}/lib`
<tr><td>chord.main.class.path<td>*path*<td>Classpath of Chord.  It includes `${chord.java.analysis.path}` to allow running user-defined program analyses.<td>see `build.xml`
<tr><td>chord.bddbddb.class.path<td>*path*<td>Classpath of bddbddb.<td>see `build.xml`
<tr><td>chord.instr.agent.file<td>*location*<td>Chord agent file.<td>`${chord.home.dir}/lib/libchord_instr_agent.so`
<tr><td>chord.javadoc.url<td>*string*<td>URL of the Javadoc location of program analyses.  It is used when publishing targets (i.e. when `${chord.publish.targets}` is set to `true`).<td>`http://chord.stanford.edu/javadoc_2_0/`